<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Image Generation & Analysis Platform</title>
    <link rel="icon" type="image/jpeg" href="https://raw.githubusercontent.com/bbinl0/altimo-gemini/refs/heads/main/favicon.jpeg">
    <link rel="manifest" href="/manifest.json">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        
        .header {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            text-align: center;
            padding: 40px 20px;
            position: relative;
        }
        
        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
        }
        
        .header p {
            font-size: 1.2em;
            opacity: 0.9;
        }
        
        .tabs {
            display: flex;
            background: #f8f9fa;
            border-bottom: 1px solid #dee2e6;
        }
        
        .tab {
            flex: 1;
            padding: 20px;
            text-align: center;
            cursor: pointer;
            border: none;
            background: none;
            font-size: 16px;
            font-weight: 500;
            transition: all 0.3s ease;
        }
        
        .tab.active {
            background: white;
            color: #667eea;
            border-bottom: 3px solid #667eea;
        }
        
        .tab:hover {
            background: #e9ecef;
        }
        
        .tab-content {
            display: none;
            padding: 40px;
        }
        
        .tab-content.active {
            display: block;
        }
        
        .form-group {
            margin-bottom: 25px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #333;
        }
        
        .form-group input,
        .form-group select,
        .form-group textarea {
            width: 100%;
            padding: 15px;
            border: 2px solid #e9ecef;
            border-radius: 10px;
            font-size: 16px;
            transition: border-color 0.3s ease;
        }
        
        .form-group input:focus,
        .form-group select:focus,
        .form-group textarea:focus {
            outline: none;
            border-color: #667eea;
        }
        
        .btn {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            padding: 15px 30px;
            border: none;
            border-radius: 10px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: transform 0.2s ease;
            width: 100%;
        }
        
        .btn:hover {
            transform: translateY(-2px);
        }
        
        .btn:disabled {
            opacity: 0.6;
            transform: none;
            cursor: not-allowed;
        }
        
        .result {
            margin-top: 30px;
            padding: 25px;
            background: #f8f9fa;
            border-radius: 15px;
            border-left: 5px solid #667eea;
        }
        
        .generated-image {
            max-width: 100%;
            height: auto;
            border-radius: 15px;
            margin: 15px 0;
            box-shadow: 0 10px 20px rgba(0,0,0,0.1);
        }
        
        .download-btn {
            background: #28a745;
            color: white;
            padding: 10px 20px;
            text-decoration: none;
            border-radius: 8px;
            display: inline-block;
            margin: 10px 5px 0 0;
            font-weight: 500;
        }
        
        .error {
            color: #dc3545;
            background: #f8d7da;
            padding: 15px;
            border-radius: 10px;
            border-left: 5px solid #dc3545;
        }
        
        .loading {
            text-align: center;
            color: #667eea;
            font-size: 18px;
            padding: 20px;
        }
        
        .spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #667eea;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 20px auto;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .two-column {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
        }
        
        @media (max-width: 768px) {
            .tabs {
                flex-direction: column;
            }
            
            .two-column {
                grid-template-columns: 1fr;
            }
            
            .header h1 {
                font-size: 2em;
            }
        }
        
        .chat-container {
            height: 400px;
            border: 2px solid #e9ecef;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
            overflow-y: auto;
            background: #f8f9fa;
        }
        
        .chat-message {
            margin-bottom: 15px;
            padding: 15px;
            border-radius: 10px;
            max-width: 80%;
        }
        
        .user-message {
            background: #667eea;
            color: white;
            margin-left: auto;
            text-align: right;
        }
        
        .ai-message {
            background: white;
            color: #333;
            border: 1px solid #e9ecef;
        }
        
        .chat-image-preview {
            margin-top: 10px;
            display: none;
        }
        
        .preview-image {
            max-width: 200px;
            max-height: 200px;
            border-radius: 8px;
        }
        
        .remove-btn {
            margin-left: 10px;
            padding: 5px 10px;
            background: #dc3545;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        
        .settings-btn {
            position: absolute;
            top: 20px;
            right: 20px;
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border-radius: 50%;
            width: 50px;
            height: 50px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            font-size: 20px;
            transition: all 0.3s ease;
        }
        
        .settings-btn:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: rotate(90deg);
        }
        
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.5);
            animation: fadeIn 0.3s;
        }
        
        .modal-content {
            background-color: #fefefe;
            margin: 10% auto;
            padding: 30px;
            border-radius: 15px;
            width: 90%;
            max-width: 500px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.2);
            position: relative;
            animation: slideIn 0.3s;
        }
        
        @keyframes fadeIn {
            from {opacity: 0;}
            to {opacity: 1;}
        }
        
        @keyframes slideIn {
            from {transform: translateY(-50px); opacity: 0;}
            to {transform: translateY(0); opacity: 1;}
        }
        
        .close-btn {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            position: absolute;
            right: 20px;
            top: 15px;
            cursor: pointer;
        }
        
        .close-btn:hover,
        .close-btn:focus {
            color: #667eea;
            text-decoration: none;
        }
        
        .api-key-input {
            width: 100%;
            padding: 15px;
            border: 2px solid #e9ecef;
            border-radius: 10px;
            font-size: 16px;
            margin: 15px 0;
            font-family: monospace;
        }
        
        .api-key-input:focus {
            outline: none;
            border-color: #667eea;
        }
        
        .api-status {
            padding: 10px 15px;
            border-radius: 8px;
            margin: 10px 0;
            font-weight: 500;
        }
        
        .api-status.connected {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        
        .api-status.disconnected {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <button class="settings-btn" onclick="openSettingsModal()" title="Settings">
                ‚öôÔ∏è
            </button>
            <h1>üé®Gemini AI One for All </h1>
            <p>Generate, Edit & Analyze Images with Advanced AI</p>
        </div>
        
        <div class="tabs">
            <button class="tab active" onclick="showTab('generate')">üé® Generate Images</button>
            <button class="tab" onclick="showTab('edit')">‚úèÔ∏è Edit Images</button>
            <button class="tab" onclick="showTab('analyze')">üîç Analyze Images</button>
            <button class="tab" onclick="showTab('chat')">üí¨ Chat with AI</button>
            <button class="tab" onclick="window.location.href='/chat'">üöÄ Advanced Chat</button>
        </div>
        
        <!-- Image Generation Tab -->
        <div id="generate" class="tab-content active">
            <form id="generateForm">
                <div class="form-group">
                    <label for="generatePrompt">Image Description:</label>
                    <textarea id="generatePrompt" placeholder="Describe the image you want to generate..." rows="4" required></textarea>
                </div>
                <div class="form-group">
                    <label for="generateProvider">AI Provider:</label>
                    <select id="generateProvider">
                        <option value="pollinations">üöÄ Pollinations AI - High Quality & Fast</option>
                        <option value="gemini">üíé Gemini AI - Creative & Artistic</option>
                    </select>
                </div>
                <div class="two-column">
                    <div class="form-group">
                        <label for="generateStyle">Art Style:</label>
                        <select id="generateStyle">
                            <option value="photorealistic">üì∑ Photorealistic</option>
                            <option value="cartoon">üé≠ Cartoon</option>
                            <option value="abstract">üé® Abstract Art</option>
                            <option value="impressionistic">üñºÔ∏è Impressionist</option>
                            <option value="cyberpunk">üåÉ Cyberpunk</option>
                            <option value="anime">üëæ Anime</option>
                            <option value="oil_painting">üé® Oil Painting</option>
                            <option value="watercolor">üíß Watercolor</option>
                            <option value="sketch">‚úèÔ∏è Sketch</option>
                            <option value="digital_art">üíª Digital Art</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="generateRatio">Aspect Ratio:</label>
                        <select id="generateRatio">
                            <option value="1:1">‚¨ú Square (1:1)</option>
                            <option value="16:9">üì∫ Landscape (16:9)</option>
                            <option value="9:16">üì± Portrait (9:16)</option>
                            <option value="4:3">üñºÔ∏è Standard Landscape (4:3)</option>
                            <option value="3:4">üñºÔ∏è Standard Portrait (3:4)</option>
                        </select>
                    </div>
                </div>
                <button type="submit" class="btn">Generate Image</button>
            </form>
            
            <div id="generateLoading" class="loading" style="display: none;">
                <div class="spinner"></div>
                <p>üé® Creating your masterpiece...</p>
            </div>
            
            <div id="generateResult" class="result" style="display: none;"></div>
            <div id="generateError" class="error" style="display: none;"></div>
        </div>
        
        <!-- Image Editing Tab -->
        <div id="edit" class="tab-content">
            <form id="editForm">
                <div class="form-group">
                    <label for="editImage">Upload Image to Edit:</label>
                    <input type="file" id="editImage" accept="image/*" required>
                </div>
                <div class="form-group">
                    <label for="editPrompt">Edit Instructions:</label>
                    <textarea id="editPrompt" placeholder="Describe how you want to edit the image..." rows="3" required></textarea>
                </div>
                <div class="form-group">
                    <label for="editStrength">Edit Strength:</label>
                    <select id="editStrength">
                        <option value="0.3">Light</option>
                        <option value="0.5">Medium</option>
                        <option value="0.7" selected>Strong</option>
                        <option value="0.9">Very Strong</option>
                    </select>
                </div>
                <button type="submit" class="btn">Edit Image</button>
            </form>
            
            <div id="editLoading" class="loading" style="display: none;">
                <div class="spinner"></div>
                <p>‚úèÔ∏è Editing your image...</p>
            </div>
            
            <div id="editResult" class="result" style="display: none;"></div>
            <div id="editError" class="error" style="display: none;"></div>
        </div>
        
        <!-- Image Analysis Tab -->
        <div id="analyze" class="tab-content">
            <div class="form-group">
                <label for="analyzeMethod">Analysis Method:</label>
                <select id="analyzeMethod">
                    <option value="upload">üìÅ Upload Image File</option>
                    <option value="url">üåê Image URL</option>
                </select>
            </div>
            
            <form id="analyzeForm">
                <div class="form-group" id="uploadSection">
                    <label for="analyzeImage">Upload Image to Analyze:</label>
                    <input type="file" id="analyzeImage" accept="image/*">
                </div>
                
                <div class="form-group" id="urlSection" style="display: none;">
                    <label for="analyzeUrl">Image URL:</label>
                    <input type="url" id="analyzeUrl" placeholder="https://example.com/image.jpg">
                    <small style="color: #666; display: block; margin-top: 5px;">
                        Enter the direct URL to an image (JPG, PNG, GIF, etc.)
                    </small>
                </div>
                
                <div class="form-group">
                    <label>
                        <input type="checkbox" id="extractMasks"> Extract object masks
                    </label>
                </div>
                <button type="submit" class="btn">Analyze Image</button>
            </form>
            
            <div id="analyzeLoading" class="loading" style="display: none;">
                <div class="spinner"></div>
                <p>üîç Analyzing your image...</p>
            </div>
            
            <div id="analyzeResult" class="result" style="display: none;"></div>
            <div id="analyzeError" class="error" style="display: none;"></div>
        </div>
        
        <!-- Chat Tab -->
        <div id="chat" class="tab-content">
            <div class="form-group">
                <label for="chatModel">AI Model:</label>
                <select id="chatModel">
                    <option value="gemini-2.5-pro">üß† Gemini 2.5 Pro (Best)</option>
                    <option value="gemini-2.5-flash" selected>‚ö° Gemini 2.5 Flash (Default)</option>
                    <option value="gemini-2.0-flash">‚ö° Gemini 2.0 Flash (Fast)</option>
                    <option value="gemini-1.5-flash">‚ö° Gemini 1.5 Flash (Legacy)</option>
                    <option value="gemini-2.5-flash-lite">üöÄ Gemini 2.5 Flash Lite (Fastest)</option>
                </select>
            </div>
            
            <div id="chatContainer" class="chat-container">
                <div id="chatHistory">
                    <div class="chat-message ai-message">
                        <strong>ü§ñ AI Assistant:</strong> Hello! I'm ready to help. What would you like to know or discuss?
                    </div>
                </div>
            </div>
            
            <form id="chatForm">
                <div class="form-group">
                    <label for="chatImage">Upload Image (Optional):</label>
                    <input type="file" id="chatImage" accept="image/*">
                    <div id="chatImagePreview" class="chat-image-preview">
                        <img id="previewImage" class="preview-image">
                        <button type="button" id="removeImage" class="remove-btn">Remove</button>
                    </div>
                </div>
                <div class="form-group">
                    <label for="chatMessage">Your Message:</label>
                    <textarea id="chatMessage" placeholder="Ask me anything or describe what you'd like to know about the uploaded image..." rows="3" required></textarea>
                </div>
                <button type="submit" class="btn">Send Message</button>
            </form>
            
            <div id="chatLoading" class="loading" style="display: none;">
                <div class="spinner"></div>
                <p>üí¨ AI is thinking...</p>
            </div>
            
            <div id="chatError" class="error" style="display: none;"></div>
        </div>
    </div>

    <!-- Settings Modal -->
    <div id="settingsModal" class="modal">
        <div class="modal-content">
            <span class="close-btn" onclick="closeSettingsModal()">&times;</span>
            <h2>‚öôÔ∏è Settings</h2>
            <div id="apiStatus" class="api-status disconnected">
                ‚ùå Gemini API key not configured - Advanced features disabled
            </div>
            <p>Enter your Gemini API key to enable advanced AI features:</p>
            <input type="password" id="apiKeyInput" class="api-key-input" placeholder="Enter your Gemini API key..." autocomplete="off">
            <div style="margin: 20px 0; font-size: 14px; color: #666;">
                <p>üîê Your API key is stored securely in your browser and sent directly to the server.</p>
                <p>üìù Get your free API key from <a href="https://aistudio.google.com/app/apikey" target="_blank" style="color: #667eea;">Google AI Studio</a></p>
            </div>
            <div style="display: flex; gap: 10px;">
                <button type="button" class="btn" onclick="saveApiKey()" style="flex: 1;">üíæ Save API Key</button>
                <button type="button" class="btn" onclick="clearApiKey()" style="flex: 1; background: #dc3545;">üóëÔ∏è Clear Key</button>
            </div>
        </div>
    </div>

    <script>
        let currentChatImage = null;
        let userApiKey = localStorage.getItem('gemini_api_key') || '';

        // Settings Modal Functions
        function openSettingsModal() {
            document.getElementById('settingsModal').style.display = 'block';
            document.getElementById('apiKeyInput').value = userApiKey ? '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢' : '';
            checkApiStatus();
        }

        function closeSettingsModal() {
            document.getElementById('settingsModal').style.display = 'none';
        }

        function saveApiKey() {
            const keyInput = document.getElementById('apiKeyInput');
            const newKey = keyInput.value.trim();
            
            if (newKey && newKey !== '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢') {
                userApiKey = newKey;
                localStorage.setItem('gemini_api_key', userApiKey);
                alert('‚úÖ API key saved successfully! Gemini AI features are now enabled.');
                keyInput.value = '‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢';
                checkApiStatus();
            } else if (!newKey) {
                alert('‚ö†Ô∏è Please enter a valid API key.');
            }
        }

        function clearApiKey() {
            if (confirm('Are you sure you want to clear the API key? This will disable Gemini AI features.')) {
                userApiKey = '';
                localStorage.removeItem('gemini_api_key');
                document.getElementById('apiKeyInput').value = '';
                checkApiStatus();
                alert('üóëÔ∏è API key cleared. Gemini AI features are now disabled.');
            }
        }

        function checkApiStatus() {
            const statusDiv = document.getElementById('apiStatus');
            if (userApiKey) {
                statusDiv.className = 'api-status connected';
                statusDiv.textContent = '‚úÖ Gemini API key configured - Advanced features enabled';
            } else {
                statusDiv.className = 'api-status disconnected';
                statusDiv.textContent = '‚ùå Gemini API key not configured - Advanced features disabled';
            }
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('settingsModal');
            if (event.target === modal) {
                closeSettingsModal();
            }
        }

        // Ensure DOM is fully loaded
        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOM loaded - initializing functionality');
            initializeEventListeners();
            initializeChatImagePreview();
            checkApiStatus();
        });
        
        // Tab switching functionality
        function showTab(tabName) {
            // Hide all tab contents
            document.querySelectorAll('.tab-content').forEach(content => {
                content.classList.remove('active');
            });
            
            // Remove active class from all tabs
            document.querySelectorAll('.tab').forEach(tab => {
                tab.classList.remove('active');
            });
            
            // Show selected tab content and mark tab as active
            document.getElementById(tabName).classList.add('active');
            event.target.classList.add('active');
        }
        
        function initializeEventListeners() {
            // Image Generation Form
            document.getElementById('generateForm').addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const prompt = document.getElementById('generatePrompt').value;
                const provider = document.getElementById('generateProvider').value;
                const style = document.getElementById('generateStyle').value;
                const ratio = document.getElementById('generateRatio').value;
                
                showLoading('generate');
                hideResults('generate');
                
                try {
                    const headers = { 'Content-Type': 'application/json' };
                    if (userApiKey && provider === 'gemini') {
                        headers['X-API-Key'] = userApiKey;
                    }
                    
                    const response = await fetch('/api/generate', {
                        method: 'POST',
                        headers: headers,
                        body: JSON.stringify({
                            prompt: prompt,
                            style: style,
                            provider: provider,
                            aspect_ratio: ratio
                        })
                    });
                    
                    const data = await response.json();
                    hideLoading('generate');
                    
                    if (data.status === 'success') {
                        showResult('generate', `
                            <h3>‚ú® Generated Image</h3>
                            <img src="data:image/png;base64,${data.image_base64}" class="generated-image" alt="Generated Image">
                            <p><strong>Prompt:</strong> ${prompt}</p>
                            <p><strong>Provider:</strong> ${data.provider || provider}</p>
                            <a href="data:image/png;base64,${data.image_base64}" download="generated_image.png" class="download-btn">üì• Download Image</a>
                        `);
                    } else {
                        showError('generate', data.error || 'Failed to generate image');
                    }
                } catch (error) {
                    hideLoading('generate');
                    showError('generate', 'Connection error: ' + error.message);
                }
            });

            // Image Editing Form
            document.getElementById('editForm').addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const fileInput = document.getElementById('editImage');
                const prompt = document.getElementById('editPrompt').value;
                const strength = parseFloat(document.getElementById('editStrength').value);
                
                if (!fileInput.files[0]) {
                    showError('edit', 'Please select an image to edit');
                    return;
                }
                
                const reader = new FileReader();
                reader.onload = async function(e) {
                    const base64Image = e.target.result;
                    
                    showLoading('edit');
                    hideResults('edit');
                    
                    try {
                        const headers = { 'Content-Type': 'application/json' };
                        if (userApiKey) {
                            headers['X-API-Key'] = userApiKey;
                        }
                        
                        const response = await fetch('/api/edit', {
                            method: 'POST',
                            headers: headers,
                            body: JSON.stringify({
                                image: base64Image,
                                edit_prompt: prompt,
                                edit_strength: strength
                            })
                        });
                        
                        const data = await response.json();
                        hideLoading('edit');
                        
                        if (data.status === 'success') {
                            showResult('edit', `
                                <h3>‚úèÔ∏è Edited Image</h3>
                                <img src="data:image/png;base64,${data.image_base64}" class="generated-image" alt="Edited Image">
                                <p><strong>Edit:</strong> ${prompt}</p>
                                <a href="data:image/png;base64,${data.image_base64}" download="edited_image.png" class="download-btn">üì• Download Edited Image</a>
                            `);
                        } else {
                            showError('edit', data.error || 'Failed to edit image');
                        }
                    } catch (error) {
                        hideLoading('edit');
                        showError('edit', error.message);
                    }
                };
                reader.readAsDataURL(fileInput.files[0]);
            });

            // Analysis method selection
            document.getElementById('analyzeMethod').addEventListener('change', function() {
                const method = this.value;
                const uploadSection = document.getElementById('uploadSection');
                const urlSection = document.getElementById('urlSection');
                
                if (method === 'upload') {
                    uploadSection.style.display = 'block';
                    urlSection.style.display = 'none';
                } else {
                    uploadSection.style.display = 'none';
                    urlSection.style.display = 'block';
                }
            });

            // Image Analysis Form
            document.getElementById('analyzeForm').addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const method = document.getElementById('analyzeMethod').value;
                let imageData = null;
                let imageUrl = null;
                
                if (method === 'upload') {
                    const fileInput = document.getElementById('analyzeImage');
                    if (!fileInput.files[0]) {
                        showError('analyze', 'Please select an image to analyze');
                        return;
                    }
                    
                    const reader = new FileReader();
                    reader.onload = async function(e) {
                        await analyzeImageData(e.target.result, null);
                    };
                    reader.readAsDataURL(fileInput.files[0]);
                    return;
                } else {
                    imageUrl = document.getElementById('analyzeUrl').value;
                    if (!imageUrl) {
                        showError('analyze', 'Please enter an image URL');
                        return;
                    }
                    await analyzeImageData(null, imageUrl);
                }
            });

            // Chat Form
            document.getElementById('chatForm').addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const message = document.getElementById('chatMessage').value;
                const model = document.getElementById('chatModel').value;
                
                if (!message.trim()) return;
                
                // Add user message to chat
                addChatMessage('user', message);
                
                showLoading('chat');
                
                try {
                    const requestBody = {
                        message: message,
                        model: model
                    };
                    
                    if (currentChatImage) {
                        requestBody.image_data = currentChatImage;
                    }
                    
                    const headers = { 'Content-Type': 'application/json' };
                    if (userApiKey) {
                        headers['X-API-Key'] = userApiKey;
                    }
                    
                    const response = await fetch('/api/chat', {
                        method: 'POST',
                        headers: headers,
                        body: JSON.stringify(requestBody)
                    });
                    
                    const data = await response.json();
                    hideLoading('chat');
                    
                    if (data.status === 'success') {
                        addChatMessage('ai', data.answer);
                    } else {
                        addChatMessage('ai', 'Error: ' + (data.error || 'Failed to get response'));
                    }
                } catch (error) {
                    hideLoading('chat');
                    addChatMessage('ai', 'Connection error: ' + error.message);
                }
                
                document.getElementById('chatMessage').value = '';
                clearChatImage();
            });
        }
        
        async function analyzeImageData(imageData, imageUrl) {
            showLoading('analyze');
            hideResults('analyze');
            
            try {
                const requestBody = {};
                if (imageData) {
                    requestBody.image = imageData;
                } else {
                    requestBody.image_url = imageUrl;
                }
                
                const headers = { 'Content-Type': 'application/json' };
                if (userApiKey) {
                    headers['X-API-Key'] = userApiKey;
                }
                
                const response = await fetch('/api/analyze', {
                    method: 'POST',
                    headers: headers,
                    body: JSON.stringify(requestBody)
                });
                
                const data = await response.json();
                hideLoading('analyze');
                
                if (data.status === 'success') {
                    showResult('analyze', `
                        <h3>üîç Image Analysis</h3>
                        <p><strong>Analysis:</strong></p>
                        <p>${data.analysis}</p>
                    `);
                } else {
                    showError('analyze', data.error || 'Failed to analyze image');
                }
            } catch (error) {
                hideLoading('analyze');
                showError('analyze', error.message);
            }
        }
        
        function initializeChatImagePreview() {
            const chatImageInput = document.getElementById('chatImage');
            const preview = document.getElementById('chatImagePreview');
            const previewImg = document.getElementById('previewImage');
            const removeBtn = document.getElementById('removeImage');
            
            chatImageInput.addEventListener('change', function(e) {
                const file = e.target.files[0];
                if (!file) return;
                
                const reader = new FileReader();
                reader.onload = function(e) {
                    currentChatImage = e.target.result;
                    previewImg.src = e.target.result;
                    preview.style.display = 'block';
                };
                reader.readAsDataURL(file);
            });
            
            removeBtn.addEventListener('click', clearChatImage);
        }
        
        function clearChatImage() {
            currentChatImage = null;
            document.getElementById('chatImage').value = '';
            document.getElementById('chatImagePreview').style.display = 'none';
        }
        
        function addChatMessage(type, message) {
            const chatHistory = document.getElementById('chatHistory');
            const messageClass = type === 'user' ? 'user-message' : 'ai-message';
            const icon = type === 'user' ? 'üë§' : 'ü§ñ';
            const label = type === 'user' ? 'You' : 'AI Assistant';
            
            const messageDiv = document.createElement('div');
            messageDiv.className = `chat-message ${messageClass}`;
            messageDiv.innerHTML = `<strong>${icon} ${label}:</strong> ${message}`;
            
            chatHistory.appendChild(messageDiv);
            document.getElementById('chatContainer').scrollTop = document.getElementById('chatContainer').scrollHeight;
        }
        
        function showLoading(tab) {
            document.getElementById(tab + 'Loading').style.display = 'block';
        }
        
        function hideLoading(tab) {
            document.getElementById(tab + 'Loading').style.display = 'none';
        }
        
        function showResult(tab, content) {
            const resultEl = document.getElementById(tab + 'Result');
            resultEl.innerHTML = content;
            resultEl.style.display = 'block';
        }
        
        function showError(tab, message) {
            const errorEl = document.getElementById(tab + 'Error');
            errorEl.innerHTML = message;
            errorEl.style.display = 'block';
        }
        
        function hideResults(tab) {
            document.getElementById(tab + 'Result').style.display = 'none';
            document.getElementById(tab + 'Error').style.display = 'none';
        }
    </script>
</body>
</html>
